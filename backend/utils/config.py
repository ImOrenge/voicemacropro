"""
VoiceMacro Pro - ÏÑ§Ï†ï Í¥ÄÎ¶¨ Î™®Îìà
OpenAI API ÌÇ§, Whisper Î™®Îç∏ ÏÑ§Ï†ï, ÏùåÏÑ± Ïù∏Ïãù ÌååÎùºÎØ∏ÌÑ∞ Í¥ÄÎ¶¨
"""

import os
from dotenv import load_dotenv

# .env ÌååÏùº Î°úÎìú (ÏûàÎäî Í≤ΩÏö∞)
load_dotenv()


class Config:
    """Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÑ§Ï†ï ÌÅ¥ÎûòÏä§"""
    
    # OpenAI API ÏÑ§Ï†ï
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
    WHISPER_MODEL = os.getenv('WHISPER_MODEL', 'whisper-1')
    GPT4O_TRANSCRIBE_MODEL = os.getenv('GPT4O_TRANSCRIBE_MODEL', 'gpt-4o-transcribe')
    
    # ÏùåÏÑ± Ïù∏Ïãù ÏÑ§Ï†ï
    VOICE_RECOGNITION_LANGUAGE = os.getenv('VOICE_RECOGNITION_LANGUAGE', 'ko')
    VOICE_RECOGNITION_TIMEOUT = int(os.getenv('VOICE_RECOGNITION_TIMEOUT', '30'))
    VOICE_RECOGNITION_MAX_FILE_SIZE = int(os.getenv('VOICE_RECOGNITION_MAX_FILE_SIZE', '25'))
    
    # GPT-4o Ïã§ÏãúÍ∞Ñ Ìä∏ÎûúÏä§ÌÅ¨Î¶ΩÏÖò ÏÑ§Ï†ï (‚úÖ Ïö∞ÏÑ† ÏÇ¨Ïö©)
    GPT4O_ENABLED = os.getenv('GPT4O_ENABLED', 'true').lower() == 'true'
    GPT4O_PRIMARY = os.getenv('GPT4O_PRIMARY', 'true').lower() == 'true'  # ‚úÖ GPT-4o Ïö∞ÏÑ† ÏÇ¨Ïö©
    GPT4O_CONFIDENCE_THRESHOLD = float(os.getenv('GPT4O_CONFIDENCE_THRESHOLD', '0.7'))
    GPT4O_VAD_THRESHOLD = float(os.getenv('GPT4O_VAD_THRESHOLD', '0.5'))
    GPT4O_NOISE_REDUCTION = os.getenv('GPT4O_NOISE_REDUCTION', 'near_field')
    GPT4O_BUFFER_SIZE_MS = int(os.getenv('GPT4O_BUFFER_SIZE_MS', '100'))
    
    # Whisper ÏÑ§Ï†ï (Ìè¥Î∞± Ïö©ÎèÑ)
    WHISPER_FALLBACK_ENABLED = os.getenv('WHISPER_FALLBACK_ENABLED', 'true').lower() == 'true'
    
    # Ïò§ÎîîÏò§ ÏÑ§Ï†ï
    SAMPLE_RATE = 16000  # Whisper Í∂åÏû• ÏÉòÌîåÎ†àÏù¥Ìä∏
    AUDIO_CHANNELS = 1   # Î™®ÎÖ∏ Ï±ÑÎÑê
    AUDIO_FORMAT = 'wav' # Ïò§ÎîîÏò§ Ìè¨Îß∑
    
    # ÌååÏùº Ï†ÄÏû• ÏÑ§Ï†ï
    TEMP_AUDIO_DIR = 'temp_audio'
    LOG_DIR = 'logs'
    
    # Î°úÍ∑∏ ÏÑ§Ï†ï
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FILE = os.getenv('LOG_FILE', 'logs/voice_recognition.log')
    
    # Îß§ÌÅ¨Î°ú Îß§Ïπ≠ ÏÑ§Ï†ï
    MATCHING_THRESHOLD = 0.7  # Îß§ÌÅ¨Î°ú Îß§Ïπ≠ ÏµúÏÜå Ïú†ÏÇ¨ÎèÑ
    MAX_MATCH_RESULTS = 5     # ÏµúÎåÄ Îß§Ïπ≠ Í≤∞Í≥º Í∞úÏàò
    
    @classmethod
    def validate_config(cls) -> bool:
        """
        ÏÑ§Ï†ï Í∞í Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
        
        Returns:
            bool: ÏÑ§Ï†ïÏù¥ Ïú†Ìö®Ìïú Í≤ΩÏö∞ True
        """
        if not cls.OPENAI_API_KEY:
            print("‚ö†Ô∏è  Í≤ΩÍ≥†: OPENAI_API_KEYÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            print("üìù ÌôòÍ≤Ω Î≥ÄÏàò ÎòêÎäî .env ÌååÏùºÏóê API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.")
            print("üîß ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ ÏÑúÎ≤ÑÎäî ÏãúÏûëÌïòÏßÄÎßå Ïã§Ï†ú ÏùåÏÑ± Ïù∏ÏãùÏùÄ ÏûëÎèôÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
        
        # ÌïÑÏöîÌïú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        os.makedirs(cls.TEMP_AUDIO_DIR, exist_ok=True)
        os.makedirs(cls.LOG_DIR, exist_ok=True)
        
        return True
    
    @classmethod
    def get_openai_client_config(cls) -> dict:
        """
        OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï Î∞òÌôò
        
        Returns:
            dict: OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ§Ï†ï
        """
        return {
            'api_key': cls.OPENAI_API_KEY,
            'timeout': cls.VOICE_RECOGNITION_TIMEOUT
        }
    
    @classmethod
    def get_gpt4o_transcription_config(cls) -> dict:
        """
        GPT-4o Ìä∏ÎûúÏä§ÌÅ¨Î¶ΩÏÖò ÏÑ§Ï†ï Î∞òÌôò
        
        Returns:
            dict: GPT-4o Ìä∏ÎûúÏä§ÌÅ¨Î¶ΩÏÖò ÏÑ§Ï†ï
        """
        return {
            'model': cls.GPT4O_TRANSCRIBE_MODEL,
            'language': cls.VOICE_RECOGNITION_LANGUAGE,
            'confidence_threshold': cls.GPT4O_CONFIDENCE_THRESHOLD,
            'vad_threshold': cls.GPT4O_VAD_THRESHOLD,
            'noise_reduction': cls.GPT4O_NOISE_REDUCTION,
            'buffer_size_ms': cls.GPT4O_BUFFER_SIZE_MS,
            'enabled': cls.GPT4O_ENABLED
        }
    
    @classmethod
    def get_websocket_config(cls) -> dict:
        """
        WebSocket ÏÑúÎ≤Ñ ÏÑ§Ï†ï Î∞òÌôò
        
        Returns:
            dict: WebSocket ÏÑ§Ï†ï
        """
        return {
            'host': 'localhost',
            'port': 5000,
            'cors_allowed_origins': "*",
            'reconnect_attempts': 3,
            'reconnect_delay': 5
        }


# ÏÑ§Ï†ï Ïù∏Ïä§ÌÑ¥Ïä§
config = Config() 